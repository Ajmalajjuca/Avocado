<!DOCTYPE html>
<html lang="zxx">

<head>
    <%- include('partials/head.ejs') %>
    <style>
        .shoping__cart__item .cart-item-image {
            max-width: 80px;
            max-height: 80px;
            width: auto;
            height: auto;
            object-fit: contain;
            transition: transform 0.3s ease;
        }
    
        .shoping__cart__item:hover .cart-item-image {
            transform: scale(1.1);
        }
    
        .shoping__cart__table {
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
        }
    
        @keyframes fadeIn {
            to { opacity: 1; }
        }
    
        .shoping__cart__table tr {
            transition: background-color 0.3s ease;
        }
    
        .shoping__cart__table tr:hover {
            background-color: #f8f9fa;
        }
    
        .quantity input {
            transition: all 0.3s ease;
        }
    
        .quantity input:focus {
            box-shadow: 0 0 0 2px #7fad39;
        }
    
        .icon_close {
            cursor: pointer;
            transition: color 0.3s ease;
        }
    
        .icon_close:hover {
            color: #dc3545;
        }
    
        .primary-btn {
            transition: all 0.3s ease;
        }
    
        .primary-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
    
        .shoping__discount input,
        .shoping__discount button {
            transition: all 0.3s ease;
        }
    
        .shoping__discount input:focus {
            box-shadow: 0 0 0 2px #7fad39;
        }
    
        .shoping__checkout {
            opacity: 0;
            animation: slideIn 0.8s ease-out 0.4s forwards;
        }
    
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(50px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
    
        .colored-toast {
            border-radius: 10px !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
        }
    
        .hero, .breadcrumb-section {
            transition: background-image 0.5s ease-in-out;
        }
        </style>
</head>

<body>
    <%- include('partials/header.ejs') %>
    <!-- Header Section End -->

    <!-- Hero Section Begin -->
    <section class="hero hero-normal">
        <div class="container">
            <div class="row">
                <div class="col-lg-3">
                    <%- include('partials/allcategory.ejs') %>
                </div>
                <div class="col-lg-9">
                    <div class="hero__search">
                        <div class="hero__search__form">
                            <form action="#">
                               
                                <input type="text" placeholder="What do yo u need?">
                                <button type="submit" class="site-btn">SEARCH</button>
                            </form>
                        </div>
                        <div class="hero__search__phone">
                            <div class="hero__search__phone__icon">
                                <i class="fa fa-phone"></i>
                            </div>
                            <div class="hero__search__phone__text">
                                <h5>+65 11.188.888</h5>
                                <span>support 24/7 time</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Hero Section End -->

    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-section set-bg" data-setbg="user/img/breadcrumb.jpg">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <div class="breadcrumb__text">
                        <h2>Shopping Cart</h2>
                        <div class="breadcrumb__option">
                            <a href="./index.html">Home</a>
                            <span>Shopping Cart</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Section End -->

    <!-- Shoping Cart Section Begin -->
    <section class="shoping-cart spad">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="shoping__cart__table">
                        <table>
                            <thead>
                                <tr>
                                    <th class="shoping__product">Products</th>
                                    <th>Price</th>
                                    <th>kg</th>
                                    <th>Total</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="cart-items">
                                <% if (cart && cart.items && cart.items.length > 0) { %>
                                    <% cart.items.forEach(item => { %>
                                  <tr>
                                    <td class="shoping__cart__item">
                                      <img src="<%= item.productId.images[0] %>" alt="<%= item.productId.name %>" class="cart-item-image">
                                      <h5><%= item.productId.name %></h5>
                                    </td>
                                    <td class="shoping__cart__price">
                                      ₹ <%= item.price.toFixed(2) %>
                                    </td>
                                    <td class="shoping__cart__quantity">
                                      <div class="quantity">
                                        <div class="pro-qty">
                                          <input type="number" value="<%= item.quantity %>" onchange="updateQuantity('<%= item.productId._id %>', this.value)" min="1">
                                        </div>
                                      </div>
                                    </td>
                                    <td class="shoping__cart__total">
                                      ₹ <%= item.Product_total ? item.Product_total.toFixed(2) : '0.00' %>
                                    </td>
                                    <td class="shoping__cart__item__close">
                                        <span class="icon_close" onclick="removeFromCart('<%= item.productId._id %>')"></span>                                    </td>
                                  </tr>
                                  <% }) %>
                                <% } else { %>
                                  <tr>
                                    <td colspan="5">Your cart is empty</td>
                                  </tr>
                                <% } %>
                              </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="shoping__cart__btns">
                        <a href="/" class="primary-btn cart-btn">CONTINUE SHOPPING</a>
                        <a href="/cart" class="primary-btn cart-btn cart-btn-right"><span class="icon_loading"></span>
                            Upadate Cart</a>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="shoping__continue">
                        <div class="shoping__discount">
                            <h5>Discount Codes</h5>
                            <form id="coupon-form">
                                <input type="text" id="coupon-code" placeholder="Enter your coupon code">
                                <button type="button" class="site-btn" onclick="applyCoupon()">APPLY COUPON</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="shoping__checkout">
                        <h5>Cart Total</h5>
                        <ul>
                            <li>Subtotal <span id="subtotal">₹ <%= cart.items.reduce((total, item) => total + item.Product_total, 0).toFixed(2) %></span></li>
                            <li id="discount-li" style="display: <%= cart.discount > 0 ? 'list-item' : 'none' %>;">
                                Discount <span id="discount">₹ -<%= cart.discount.toFixed(2) %></span>
                            </li>
                            <li>Total <span id="total">₹ <%= cart.Cart_total.toFixed(2) %></span></li>
                        </ul>
                        <a href="/checkout" class="primary-btn">PROCEED TO CHECKOUT</a>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Shoping Cart Section End -->

    <!-- Footer Section Begin -->
    <%- include('partials/footer.ejs') %>
    <!-- Footer Section End -->

    <!-- Js Plugins -->
   <%- include('partials/foot.ejs') %>

   <script>

async function removeFromCart(productId) {
    try {
        const response = await fetch('/cart/remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        });

        const data = await response.json();
        console.log('Server response:', data);

        if (data.success) {
            updateCartDisplay(data.cart);
            showToast('success', 'Product removed from cart');
        } else {
            throw new Error(data.message || 'Failed to remove product from cart');
        }
    } catch (error) {
        console.error('Error removing product from cart:', error);
        showToast('error', `Failed to remove product from cart: ${error.message}`);
    }
}

async function updateQuantity(productId, quantity) {
    try {
        const stockStatus = await checkStock(productId, quantity);
        if (!stockStatus.success) {
            showToast('error', stockStatus.message);
            return;
        }

        const response = await fetch('/cart/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId, quantity: parseInt(quantity) })
        });

        const data = await response.json();
        console.log('Server response:', data);

        if (data.success) {
            updateCartDisplay(data.cart);
            showToast('success', 'Cart updated successfully');
        } else {
            throw new Error(data.message || 'Failed to update quantity');
        }
    } catch (error) {
        console.error('Error updating quantity:', error);
        showToast('error', `Failed to update quantity: ${error.message}`);
    }
}

async function checkStock(productId, quantity) {
    try {
        const response = await fetch(`/product/check-stock/${productId}/${quantity}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error checking stock:', error);
        return { success: false, message: 'Failed to check stock' };
    }
}


function updateCartDisplay(cartData) {
    const cartItemsContainer = document.getElementById('cart-items');
    cartItemsContainer.innerHTML = '';

    if (cartData && cartData.items && Array.isArray(cartData.items) && cartData.items.length > 0) {
        cartData.items.forEach(item => {
            if (item && item.productId) {
                const itemElement = document.createElement('tr');
                itemElement.innerHTML = `
                    <td class="shoping__cart__item">
                        <img src="${item.productId.images && item.productId.images[0] ? item.productId.images[0] : ''}" alt="${item.productId.name || ''}" class="cart-item-image">
                        <h5>${item.productId.name || ''}</h5>
                    </td>
                    <td class="shoping__cart__price">
                        ₹ ${(item.price || 0).toFixed(2)}
                    </td>
                    <td class="shoping__cart__quantity">
                        <div class="quantity">
                            <div class="pro-qty">
                                <input type="number" value="${item.quantity || 1}" onchange="updateQuantity('${item.productId._id || ''}', this.value)" min="1">
                            </div>
                        </div>
                    </td>
                    <td class="shoping__cart__total">
                        ₹ ${(item.Product_total || 0).toFixed(2)}
                    </td>
                    <td class="shoping__cart__item__close">
                        <span class="icon_close" onclick="removeFromCart('${item.productId._id || ''}')"></span>
                    </td>
                `;
                cartItemsContainer.appendChild(itemElement);
            }
        });
    } else {
        cartItemsContainer.innerHTML = '<tr><td colspan="5">Your cart is empty</td></tr>';
    }

    // Calculate subtotal safely
    const subtotal = (cartData && cartData.items) ? 
        cartData.items.reduce((total, item) => total + (item.Product_total || 0), 0) : 0;
    const subtotalElement = document.getElementById('subtotal');
    if (subtotalElement) {
        subtotalElement.textContent = `₹ ${subtotal.toFixed(2)}`;
    }

    // Update discount
    const discountElement = document.getElementById('discount-li');
    const discountValueElement = document.getElementById('discount');
    if (discountElement && discountValueElement) {
        if (cartData && cartData.discount && cartData.discount > 0) {
            discountElement.style.display = 'list-item';
            discountValueElement.textContent = `₹ -${cartData.discount.toFixed(2)}`;
        } else {
            discountElement.style.display = 'none';
        }
    }

    // Update total
    const totalElement = document.getElementById('total');
    if (totalElement) {
        totalElement.textContent = `₹ ${((cartData && cartData.Cart_total) || 0).toFixed(2)}`;
    }

    // Force a re-render of the cart summary
    const cartSummary = document.querySelector('.shoping__checkout');
    if (cartSummary) {
        cartSummary.style.display = 'none';
        setTimeout(() => {
            cartSummary.style.display = 'block';
        }, 0);
    }
}


async function applyCoupon() {
    const couponCode = document.getElementById('coupon-code').value;
    if (!couponCode) {
        showToast('error', 'Please enter a coupon code');
        return;
    }

    try {
        const response = await fetch('/cart/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode })
        });

        const data = await response.json();

        if (data.success) {
            updateCartDisplay(data.cart);
            showToast('success', 'Coupon applied successfully');
        } else {
            throw new Error(data.message || 'Failed to apply coupon');
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        showToast('error', `Failed to apply coupon: ${error.message}`);
    }
}
async function removeCoupon() {
    try {
        const response = await fetch('/cart/remove-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        

        const data = await response.json();


        if (data.success) {
            updateCartDisplay(data.cart);
            showToast('success', 'Coupon removed successfully');
            document.getElementById('coupon-code').value = '';
        } else {
            throw new Error(data.message || 'Failed to remove coupon');
        }
    } catch (error) {
        console.error('Error removing coupon:', error);
        showToast('error', `Failed to remove couponZZ: ${error.message}`);
    }
}

function showToast(icon, title) {
    let backgroundColor;
    let textColor = '#ffffff';  // White text for all toasts

    switch(icon) {
        case 'success':
            backgroundColor = '#28a745';  // Green
            break;
        case 'error':
            backgroundColor = '#dc3545';  // Red
            break;
        case 'warning':
            backgroundColor = '#ffc107';  // Yellow
            textColor = '#000000';  // Black text for better contrast on yellow
            break;
        case 'info':
            backgroundColor = '#17a2b8';  // Blue
            break;
        default:
            backgroundColor = '#6c757d';  // Gray (default)
    }

    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        },
        customClass: {
            popup: 'colored-toast'
        }
    })

    Toast.fire({
        icon: icon,
        title: title,
        background: backgroundColor,
        color: textColor
    })
}

function addParallaxEffect() {
        window.addEventListener('scroll', function() {
            const scrollPosition = window.pageYOffset;
            document.querySelector('.hero').style.backgroundPositionY = scrollPosition * 0.5 + 'px';
            document.querySelector('.breadcrumb-section').style.backgroundPositionY = -scrollPosition * 0.2 + 'px';
        });
    }

    function addQuantityAnimation() {
        const quantities = document.querySelectorAll('.pro-qty input');
        quantities.forEach(input => {
            input.addEventListener('change', function() {
                this.classList.add('pulse');
                setTimeout(() => this.classList.remove('pulse'), 500);
            });
        });
    }

    function enhanceButtonInteractions() {
        const buttons = document.querySelectorAll('.primary-btn');
        buttons.forEach(button => {
            button.addEventListener('mouseenter', function() {
                this.style.transform = 'scale(1.05)';
            });
            button.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1)';
            });
        });
    }

    // Call these functions after the page loads
    window.addEventListener('load', function() {
        addParallaxEffect();
        addQuantityAnimation();
        enhanceButtonInteractions();
    });


</script>
</body>

</html>
