<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('partials/head'); %>
    <style>
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }

      .orders-title {
        font-size: 24px;
        color: #333;
        margin-bottom: 20px;
      }

      .orders-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }

      .order-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
      }

      .order-info {
        display: flex;
        flex-direction: column;
      }

      .order-id {
        font-weight: bold;
        color: #495057;
      }

      .order-date {
        font-size: 0.9em;
        color: #6c757d;
      }

      .order-status {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: bold;
      }

      .status-pending {
        background-color: #fff3cd;
        color: #856404;
      }
      .status-shipped {
        background-color: #cff4fc;
        color: #077990;
      }
      .status-delivered {
        background-color: #d4edda;
        color: #155724;
      }
      .status-intransit {
        background-color: #d6e1fb;
        color: #1d3e8d;
      }
      .status-canceled {
        background-color: #fdcccc;
        color: #920001;
      }

      .order-summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #fff;
      }

      .order-total {
        font-weight: bold;
        color: #28a745;
      }

      .view-details-btn {
        background-color: #7fad39;
        color: #fff;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .view-details-btn:hover {
        background-color: #63882a;
      }

      .order-details {
        display: none;
        padding: 15px;
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
      }

      .item-list {
        list-style-type: none;
        padding: 0;
      }

      .item-list li {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
      }

      .order-address,
      .payment-method {
        margin-top: 15px;
      }

      .no-orders {
        text-align: center;
        padding: 40px;
        background-color: #f8f9fa;
        border-radius: 8px;
      }

      .shop-now-btn {
        display: inline-block;
        margin-top: 15px;
        padding: 10px 20px;
        background-color: #28a745;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
      }

      .shop-now-btn:hover {
        background-color: #218838;
      }
      .return-order-btn {
        background-color: #ffc107;
        color: #000;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-left: 10px;
      }

      .return-order-btn:hover {
        background-color: #e0a800;
      }
      .cancel-order-btn {
        background-color: #dc3545;
        color: #fff;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-left: 10px;
      }

      .cancel-order-btn:hover {
        background-color: #c82333;
      }
      .order-tracking-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.order-tracking-steps {
  display: flex;
  justify-content: space-between;
  width: 100%;
  position: relative;
}

.order-tracking-step {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
  z-index: 1;
}

.order-tracking-icon {
  width: 40px;
  height: 40px;
  background-color: #f1f1f1;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 8px;
  transition: background-color 0.3s ease;
}

.order-tracking-icon i {
  color: #6c757d;
  font-size: 18px;
  transition: color 0.3s ease;
}

.order-tracking-label {
  font-size: 14px;
  color: #6c757d;
  transition: color 0.3s ease;
}

.order-tracking-progress {
  width: 100%;
  height: 4px;
  background-color: #f1f1f1;
  margin-top: 16px;
  position: relative;
}

.order-tracking-progress-bar {
  height: 100%;
  transition: width 0.5s ease;
}

.order-tracking-step.active .order-tracking-icon {
  background-color: #007bff;
}

.order-tracking-step.active .order-tracking-icon i {
  color: #fff;
}

.order-tracking-step.active .order-tracking-label {
  color: #007bff;
}

      button {
        margin-top: 15px;
      }
    </style>
  </head>
  <body>
    <%- include('partials/header'); %>

    <div class="container">
      <h2 class="orders-title">Your Orders</h2>

      <% if (orders.length > 0) { %>
      <div class="orders-list">
        <% orders.forEach(order => { %>
        <div class="order-card">
          <div class="order-header">
            <div class="order-info">
              <span class="order-id">Order #<%= order.orderId %></span>
              <span class="order-date"
                ><%= new Date(order.createdAt).toLocaleDateString() %></span
              >
            </div>
            <div class="order-status status-<%= order.status.toLowerCase() %>">
              <%= order.status %>
            </div>
          </div>
          <div class="order-summary">
            <div class="order-total">
              Total: ₹<%= order.amount.toFixed(2) %>
            </div>
            <div>
              <a href="/invoice/<%= order._id %>" class="view-details-btn">View Invoice</a>

              <a
                href="javascript:void(0);"
                class="view-details-btn"
                onclick="showOrderDetails('<%= order._id %>')"
                >View Details</a
              >


              <% if (['pending', 'intransit',
              'shipped'].includes(order.status.toLowerCase())) { %>
              <button
                id="cancelOrderBtn"
                class="cancel-order-btn"
                onclick="confirmCancelOrder('<%= order._id %>')"
              >
                Cancel Order
              </button>
              <% } else if (order.status.toLowerCase() === 'delivered') { %>
              <button
                class="return-order-btn"
                onclick="confirmReturnOrder('<%= order._id %>')"
              >
                Return Order
              </button>
              <a href="/invoice/<%= order._id %>" class="btn btn-success">View Invoice</a>

              <% } %>
            </div>
          </div>

         
          
        </div>
        <% }) %>
      </div>
      <% } else { %>
      <div class="no-orders">
        <p>You have no orders yet.</p>
        <a href="/products" class="shop-now-btn">Start Shopping</a>
      </div>
      <% } %>
    </div>

    <!--Modal -->
    <div
      class="modal fade"
      id="orderDetailsModal"
      tabindex="-1"
      aria-labelledby="orderDetailsModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="orderDetailsModalLabel">
              Order Details
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <div id="modalOrderDetails">
              <!-- Order details will be populated here -->
            </div>
          </div>
          <div class="modal-footer">
  <button
    type="button"
    class="btn btn-secondary"
    data-bs-dismiss="modal"
  >
    Close
  </button>
  
  

</div>
        </div>
      </div>
    </div>

    <%- include('partials/footer'); %> <%- include('partials/foot'); %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      function showOrderDetails(orderId) {
        fetch(`/orders/${orderId}/details`)
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              const order = data.order;
              const modalOrderDetails =
                document.getElementById("modalOrderDetails");
              modalOrderDetails.innerHTML = `
          <div class="card border-0 shadow">
  <div class="card-header bg-primary text-white py-3">
    <h5 class="mb-0 fw-bold">Order #${order.orderId}</h5>
  </div>
  <div class="card-body p-4">
    <div class="row mb-4">
      <div class="col-md-6">
        <h6 class="text-muted mb-3">Customer Details</h6>
        <p class="mb-1"><i class="fas fa-user me-2"></i> <strong>${order.address.name}</strong></p>
        <p class="mb-1"><i class="fas fa-envelope me-2"></i> ${order.address.email}</p>
        <h6 class="text-muted mt-3 mb-2">Shipping Address</h6>
        <p class="mb-1"><i class="fas fa-home me-2"></i> ${order.address.housename}</p>
        <p class="mb-1"><i class="fas fa-map-marker-alt me-2"></i> ${order.address.street}, ${order.address.city}, ${order.address.state}, ${order.address.country} - ${order.address.pincode}</p>
      </div>
      <div class="col-md-6 text-md-end">
        <h6 class="text-muted mb-3">Order Summary</h6>
        <p class="mb-1"><strong>Total Amount:</strong> <span class="fs-5">₹${order.amount}</span></p>
        <p class="mb-1"><strong>Status:</strong> <span class="badge bg-${getStatusColor(order.status)} px-3 py-2">${order.status}</span></p>
        <p class="mb-1"><strong>Payment Method:</strong> <span class="fs-5">${order.payment}</span></p>
      </div>
    </div>
    <h6 class="mb-3 text-primary">Order Items</h6>
    <div class="table-responsive">
      <table class="table table-hover">
        <thead class="table-light">
          <tr>
            <th scope="col">Product</th>
            <th scope="col" class="text-center">Quantity</th>
            <th scope="col" class="text-end">Price</th>
            <th scope="col" class="text-end">Subtotal</th>
          </tr>
        </thead>
        <tbody>
          ${order.items
            .map(
              (item) => `
            <tr>
              <td>
                <div class="d-flex align-items-center">
                  <img src="${item.productId.images[0]}" alt="${item.productId.name}" class="rounded me-3" style="width: 60px; height: 60px; object-fit: cover;">
                  <div>
                    <h6 class="mb-0">${item.productId.name}</h6>
                    <small class="text-muted">
                      ${(() => {
                        if (item.productId && item.productId.category) {
                          return item.productId.category.name || "N/A (Name not found)";
                        }
                        return "N/A (Category not found)";
                      })()}
                    </small>
                  </div>
                </div>
              </td>
              <td class="text-center">${item.quantity}</td>
              <td class="text-end">₹${item.price.toFixed(2)}</td>
              <td class="text-end">₹${(item.quantity * item.price).toFixed(2)}</td>
            </tr>
          `
            )
            .join("")}
        </tbody>
        <tfoot>
          <tr class="fw-bold">
            <td colspan="3" class="text-end">Total:</td>
            <td class="text-end">₹${order.amount.toFixed(2)}</td>
          </tr>
        </tfoot>
      </table>
    </div>
<div class="mt-4">
  <h6 class="text-primary mb-3">Order Tracking</h6>
  <div class="order-tracking-container">
    <div class="order-tracking-steps">
      <div class="order-tracking-step">
        <div class="order-tracking-icon">
          <i class="fas fa-check"></i>
        </div>
        <div class="order-tracking-label">Order Placed</div>
      </div>
      <div class="order-tracking-step">
        <div class="order-tracking-icon">
          <i class="fas fa-truck"></i>
        </div>
        <div class="order-tracking-label">Shipped</div>
      </div>
      <div class="order-tracking-step">
        <div class="order-tracking-icon">
          <i class="fas fa-shipping-fast"></i>
        </div>
        <div class="order-tracking-label">In-transit</div>
      </div>
      <div class="order-tracking-step">
        <div class="order-tracking-icon">
          <i class="fas fa-home"></i>
        </div>
        <div class="order-tracking-label">Delivered</div>
      </div>
    </div>
    <div class="order-tracking-progress">
      <div id="progressBar" class="order-tracking-progress-bar bg-primary" style="width: 0%;"></div>
    </div>
  </div>
</div>
  </div>
</div>
          
        `;
        function updateOrderTracking(status) {
  const progressBar = document.getElementById('progressBar');
  const orderTrackingSteps = document.querySelectorAll('.order-tracking-step');

  // Update the progress bar
  switch (status) {
    case 'pending':
      progressBar.style.width = '25%';
      break;
    case 'shipped':
      progressBar.style.width = '50%';
      break;
    case 'intransit':
      progressBar.style.width = '75%';
      break;
    case 'delivered':
      progressBar.style.width = '100%';
      break;
    case 'canceled':
      progressBar.style.width = '100%';
      progressBar.classList.add('bg-danger');
      break;
    default:
      progressBar.style.width = '0%';
  }

  // Update the order tracking steps
  orderTrackingSteps.forEach((step, index) => {
    step.classList.remove('active');
    if (index <= Math.floor((progressBar.offsetWidth / progressBar.parentElement.offsetWidth) * 4)) {
      step.classList.add('active');
    }
  });
}

updateOrderTracking(order.status.toLowerCase());

              var myModal = new bootstrap.Modal(
                document.getElementById("orderDetailsModal")
              );
              myModal.show();
            } else {
              alert("Order details could not be fetched.");
            }
          })
          .catch((error) => console.error("Error:", error));
      }
      function getStatusColor(status) {
        switch (status.toLowerCase()) {
          case "pending":
            return "warning";
          case "shipped":
            return "info";
          case "delivered":
            return "success";
          case "intransit":
            return "primary";
          case "canceled":
            return "danger";
          default:
            return "secondary";
        }
      }

      function confirmCancelOrder(orderId) {
  Swal.fire({
    title: 'Cancel Order',
    html: '<p class="swal-text">We\'re sorry to see you cancel. Please tell us why:</p>',
    input: 'textarea',
    inputPlaceholder: 'Enter your reason here...',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: '<i class="fas fa-times"></i> Cancel Order',
    cancelButtonText: '<i class="fas fa-arrow-left"></i> Go Back',
    reverseButtons: true,
    background: '#f8f9fa',
    backdrop: `
      rgba(0,0,123,0.4)
      url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.4'%3E%3Cpath d='M50 50c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10s-10-4.477-10-10 4.477-10 10-10zM10 10c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10S0 25.523 0 20s4.477-10 10-10zm10 8c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm40 40c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E")
    `,
    customClass: {
      container: 'custom-swal-container',
      popup: 'custom-swal-popup',
      header: 'custom-swal-header',
      title: 'custom-swal-title',
      closeButton: 'custom-swal-close-button',
      content: 'custom-swal-content',
      input: 'custom-swal-input',
      actions: 'custom-swal-actions',
      confirmButton: 'custom-swal-confirm-button',
      cancelButton: 'custom-swal-cancel-button'
    },
    inputValidator: (value) => {
      if (!value) {
        return 'Please provide a reason for cancellation.'
      }
    }

  }).then((result) => {
    if (result.isConfirmed) {
      const reason = result.value;
      fetch(`/orders/${orderId}/cancel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reason: reason })
      }).then((response) => response.json())
        .then((data) => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Order Canceled',
              text: 'Your order has been successfully canceled. If eligible, the amount has been refunded to your wallet.',
              confirmButtonColor: '#28a745'
            }).then(() => location.reload());
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Cancellation Failed',
              text: data.message || 'There was a problem canceling your order. Please try again.',
              confirmButtonColor: '#d33'
            });
          }
        });
    }
  });
}

function confirmReturnOrder(orderId) {
  Swal.fire({
    title: 'Return Order',
    html: '<p class="swal-text">We\'re sorry to hear you want to return your order. Please tell us why:</p>',
    input: 'textarea',
    inputPlaceholder: 'Enter your reason here...',
    showCancelButton: true,
    confirmButtonColor: '#ffc107',
    cancelButtonColor: '#3085d6',
    confirmButtonText: '<i class="fas fa-undo"></i> Return Order',
    cancelButtonText: '<i class="fas fa-arrow-left"></i> Go Back',
    reverseButtons: true,
    background: '#f8f9fa',
    backdrop: `
      rgba(0,0,123,0.4)
      url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.4'%3E%3Cpath d='M50 50c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10s-10-4.477-10-10 4.477-10 10-10zM10 10c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10S0 25.523 0 20s4.477-10 10-10zm10 8c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm40 40c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E")
    `,
    customClass: {
      container: 'custom-swal-container',
      popup: 'custom-swal-popup',
      header: 'custom-swal-header',
      title: 'custom-swal-title',
      closeButton: 'custom-swal-close-button',
      content: 'custom-swal-content',
      input: 'custom-swal-input',
      actions: 'custom-swal-actions',
      confirmButton: 'custom-swal-confirm-button',
      cancelButton: 'custom-swal-cancel-button'
    },
    inputValidator: (value) => {
      if (!value) {
        return 'Please provide a reason for returning the order.'
      }
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const reason = result.value;
      fetch(`/orders/${orderId}/return`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reason: reason })
      }).then((response) => response.json())
        .then((data) => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Return Initiated',
              text: 'Your return request has been successfully submitted. If eligible, the amount will be refunded to your wallet once processed.',
              confirmButtonColor: '#28a745'
            }).then(() => location.reload());
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Return Failed',
              text: data.message || 'There was a problem initiating your return. Please try again.',
              confirmButtonColor: '#d33'
            });
          }
        });
    }
  });
}


</script>
  </body>
</html>
